version: '3.8'

services:
  # GitHub Actions Self-Hosted Runner
  github-runner:
    build:
      context: .
      dockerfile: docker/runner/Dockerfile
    container_name: billion-rows-runner
    restart: unless-stopped
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPOSITORY=${GITHUB_REPOSITORY}
      - RUNNER_LABELS=billion-rows,linux,amd64
      - RUNNER_NAME=billion-rows-runner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/workspace/data
      - ./results:/workspace/results
      - ./submissions:/workspace/submissions
    networks:
      - tournament-network

  # PostgreSQL Database for Results
  postgres:
    image: postgres:15-alpine
    container_name: billion-rows-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=billion_rows
      - POSTGRES_USER=tournament
      - POSTGRES_PASSWORD=${DB_PASSWORD:-tournament123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - tournament-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: billion-rows-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tournament-network

  # Nginx for Static File Serving
  nginx:
    image: nginx:alpine
    container_name: billion-rows-nginx
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8443:443"
    volumes:
      - ./website:/usr/share/nginx/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - tournament-network

  # Monitoring Dashboard
  monitoring:
    image: grafana/grafana:latest
    container_name: billion-rows-monitoring
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - tournament-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  tournament-network:
    driver: bridge


